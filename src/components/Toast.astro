---
interface Props {
  message: string;
  type?: 'success' | 'error' | 'warning';
}

const { 
  message, 
  type = 'success' 
} = Astro.props;

const typeStyles = {
  success: 'bg-green-500',
  error: 'bg-red-500',
  warning: 'bg-yellow-500'
};
---

<div 
  id="toast" 
  class={`
    fixed top-4 right-4 z-50 px-4 py-2 text-white rounded-lg shadow-lg transition-all duration-300 
    ${typeStyles[type]}
    opacity-0 translate-x-full
  `}
>
  {message}
</div>

<script>
  function showToast(message: string, type: 'success' | 'error' | 'warning' = 'success') {
    const toast = document.getElementById('toast');
    if (!toast) return;

    // Set message and type
    toast.textContent = message;
    toast.className = `
      fixed top-4 right-4 z-50 px-4 py-2 text-white rounded-lg shadow-lg transition-all duration-300 
      ${type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-yellow-500'}
      opacity-100 translate-x-0
    `;

    // Hide after 3 seconds
    setTimeout(() => {
      toast.className = `
        fixed top-4 right-4 z-50 px-4 py-2 text-white rounded-lg shadow-lg transition-all duration-300 
        ${type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-yellow-500'}
        opacity-0 translate-x-full
      `;
    }, 3000);
  }

  // Make showToast globally available
  window.showToast = showToast;
</script>
